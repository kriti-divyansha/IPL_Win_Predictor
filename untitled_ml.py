# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dekRBqa1Y6Qz2EGR8QV0oGJP7humRuoD
"""

import numpy as np
import pandas as pd

match = pd.read_csv('/content/matches.csv')
delivery = pd.read_csv('/content/deliveries.csv.zip')

match.head()

match.shape

delivery.head()

total_score_df = delivery.groupby(['match_id','inning']).sum()['total_runs'].reset_index() #we use reset_index to convert it into a dataframe

total_score_df = total_score_df[total_score_df['inning'] == 1]

total_score_df

match_df = match.merge(total_score_df[['match_id','total_runs']],left_on='id',right_on='match_id')

match_df

match_df['team1'].unique()

teams = [
    'Sunrisers Hyderabad',
    'Mumbai Indians',
    'Royal Challengers Bangalore',
    'Kolkata Knight Riders',
    'Kings XI Punjab',
    'Chennai Super Kings',
    'Rajasthan Royals',
    'Delhi Capitals'
]

match_df['team1'] = match_df['team1'].str.replace('Delhi Daredevils','Delhi Capitals')
match_df['team2'] = match_df['team2'].str.replace('Delhi Daredevils','Delhi Capitals')

match_df['team1'] = match_df['team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
match_df['team2'] = match_df['team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')

match_df = match_df[match_df['team1'].isin(teams)]
match_df = match_df[match_df['team2'].isin(teams)]

match_df.shape

match_df = match_df[['match_id','city','winner','total_runs']]

delivery_df = match_df.merge(delivery,on='match_id')

delivery_df = delivery_df[delivery_df['inning'] == 2]

delivery_df

delivery_df.groupby('match_id')[['total_runs_y']].cumsum()

delivery_df['current_score']= delivery_df.groupby('match_id')[['total_runs_y']].cumsum()

delivery_df['runs_left'] = delivery_df['total_runs_x'] - delivery_df['current_score']

delivery_df['balls_left']= 126 - (delivery_df['over']*6 + delivery_df['ball'])

delivery_df

# Step 1: Create a column marking if a wicket has fallen
delivery_df['wicket_fallen'] = delivery_df['player_dismissed'].notnull().astype(int)

# Step 2: Cumulative sum of wickets per match and inning
delivery_df['cumulative_wickets'] = delivery_df.groupby(['match_id', 'inning'])['wicket_fallen'].cumsum()

# Step 3: Calculate remaining wickets
delivery_df['wickets'] = 10 - delivery_df['cumulative_wickets']

# Step 4: Clip negative values (ensure minimum is 0)
delivery_df['wickets'] = delivery_df['wickets'].clip(lower=0)

# Optional: View a few rows
delivery_df[['match_id','winner', 'inning','total_runs_x', 'over', 'ball', 'player_dismissed', 'wicket_fallen', 'cumulative_wickets', 'wickets']].head(20)

# Step 1: Mark wicket if player_dismissed is not null
delivery_df['wicket_fallen'] = delivery_df['player_dismissed'].notnull().astype(int)

# Step 2: Cumulative sum of wickets per match and inning
delivery_df['cumulative_wickets'] = delivery_df.groupby(['match_id', 'inning'])['wicket_fallen'].cumsum()

# Step 3: Wickets remaining
delivery_df['wickets'] = (10 - delivery_df['cumulative_wickets']).clip(lower=0)

delivery_df.head()

#crr = runs/overs
delivery_df['crr'] = (delivery_df['current_score']*6)/(120 - delivery_df['balls_left'])

delivery_df['rrr'] = (delivery_df['runs_left']*6)/delivery_df['balls_left']

delivery_df

def result(row):
  return 1 if row['batting_team'] == row['winner'] else 0

delivery_df['result'] = delivery_df.apply(result,axis=1)

final_df=delivery_df[['batting_team','bowling_team','city','runs_left','balls_left','wickets','total_runs_x','crr','rrr','result']]

final_df.sample()

final_df = final_df[final_df['balls_left'] != 0]

final_df.dropna(inplace=True)

X = final_df.iloc[:,:-1]
y = final_df.iloc[:,-1]
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)

X_train

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

trf = ColumnTransformer([
    ('trf', OneHotEncoder(sparse_output=False, drop='first', handle_unknown='ignore'),
     ['batting_team', 'bowling_team', 'city'])
], remainder='passthrough')

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline

pipe = Pipeline(steps=[
    ('step1',trf),
    ('step2',LogisticRegression(solver='liblinear'))
])

X_train.replace([np.inf, -np.inf], np.nan, inplace=True)
X_train.fillna(0, inplace=True)

pipe.fit(X_train,y_train)

for df in [X_train, X_test]:
    df.replace([np.inf, -np.inf], np.nan, inplace=True)
    df.fillna(0, inplace=True)

y_pred = pipe.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

pipe.predict_proba(X_test)[10]

def match_summary(row):
    print("Batting Team-" + row['batting_team'] + " | Bowling Team-" + row['bowling_team'] + " | Target- " + str(row['total_runs_x']))

def match_progression(x_df, match_id, pipe):
    match = x_df[x_df['match_id'] == match_id]
    if match.empty:
        print(f"No data found for match ID {match_id}")
        return None, None  # return if no data for match_id

    match = match[(match['ball'] == 6)]
    if match.empty:
        print(f"No data with ball == 6 for match ID {match_id}")
        return None, None  # return if no data for 'ball == 6'

    # âœ… Check for required columns
    required_cols = ['batting_team', 'bowling_team', 'city', 'runs_left', 'balls_left',
                     'wickets', 'total_runs_x', 'crr', 'rrr']
    missing_cols = [col for col in required_cols if col not in match.columns]
    if missing_cols:
        print("Missing columns:", missing_cols)
        return None, None  # Stop function if required columns are missing

    # Continue with processing if data is valid
    temp_df = match[required_cols].dropna()
    if temp_df.empty:
        print(f"No valid data after dropna for match ID {match_id}")
        return None, None  # return if dropna removes all rows

    # Rest of function continues here
    temp_df.replace([np.inf, -np.inf], np.nan, inplace=True)
    temp_df.dropna(inplace=True)
    result = pipe.predict_proba(temp_df)
    temp_df['lose'] = np.round(result.T[0] * 100, 1)
    temp_df['win'] = np.round(result.T[1] * 100, 1)
    temp_df['end_of_over'] = range(1, temp_df.shape[0] + 1)

    target = temp_df['total_runs_x'].values[0]
    runs = list(temp_df['runs_left'].values)
    new_runs = runs[:]
    runs.insert(0, target)
    temp_df['runs_after_over'] = np.array(runs)[:-1] - np.array(new_runs)

    wickets = list(temp_df['wickets'].values)
    new_wickets = wickets[:]
    new_wickets.insert(0, 10)
    wickets.append(0)
    w = np.array(wickets)
    nw = np.array(new_wickets)
    temp_df['wickets_in_over'] = (nw - w)[0:temp_df.shape[0]]

    temp_df = temp_df[['end_of_over', 'runs_after_over', 'wickets_in_over', 'lose', 'win']]
    return temp_df, target

print(delivery_df.columns.tolist())

# If 'total_runs' doesn't exist but 'total_runs_x' does:
if 'total_runs_x' in match.columns:
    match = match.rename(columns={'total_runs_x': 'total_runs'})

if 'total_runs_x' in delivery_df.columns and 'total_runs' not in delivery_df.columns:
    delivery_df.rename(columns={'total_runs_x': 'total_runs'}, inplace=True)

print(delivery_df['match_id'].dtype)
print(delivery_df['match_id'].unique()[:15])

match_id = 335982
if match_id not in delivery_df['match_id'].values:
    print(f"Match ID {match_id} does not exist in the dataset.")
else:
    print(f"Match ID {match_id} found!")

delivery_df['total_runs_x'] = delivery_df['total_runs']

temp_df, target = match_progression(delivery_df,336003, pipe)
print(temp_df)

import matplotlib.pyplot as plt
plt.figure(figsize=(18,8))
plt.plot(temp_df['end_of_over'],temp_df['wickets_in_over'],color='yellow',linewidth=3)
plt.plot(temp_df['end_of_over'],temp_df['win'],color='#00a65a',linewidth=4)
plt.plot(temp_df['end_of_over'],temp_df['lose'],color='red',linewidth=4)
plt.bar(temp_df['end_of_over'],temp_df['runs_after_over'])
plt.title('Target-' + str(target))

teams

delivery_df['city'].unique()